generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name                   String?
  profilePicUrl          String?
  email                  String         @unique
  password               String
  verified               Boolean        @default(false)
  status                 Boolean        @default(true)
  createdAt              DateTime
  updatedAt              DateTime
  id                     String         @id @default(cuid())
  address                String?
  city                   String?
  country                String?
  dateOfBirth            DateTime?
  gender                 String?
  requiredPasswordChange Boolean        @default(false)
  firstName              String?
  lastName               String?
  blogs                  Blog[]         @relation("UserBlogs")
  keystores              Keystore[]
  roles                  Role[]         @relation("RoleToUser")
  studentAllocations     Allocation[]   @relation(name: "StudentAllocations")
  tutorAllocations       Allocation[]   @relation(name: "TutorAllocations")
  messages               Message[]      @relation(name: "Sender")
  receivedMessages       Message[]      @relation(name: "Receiver")
  documents              Document[]     @relation(name: "Documents")
  likes                  Like[]
  comments               Comment[]      @relation(name: "UserComments")
  notifications          Notification[] @relation(name: "UserNotifications")
  meetings               Meeting[]      @relation(name: "StudentMeetings")
  tutorMeetings          Meeting[]      @relation(name: "TutorMeetings")
  allocators             AllocationHistory[] @relation(name: "Allocators")
  activityLogs           UserActivity[] 
}

model Blog {
  id              String    @id @default(cuid())
  title           String
  description     String
  draftText       String?
  contentRichText String?
  tags            String[]
  authorId        String
  imgUrl          String?
  blogUrl         String?
  likes           Int?
  score           Float     @default(0.01)
  isSubmitted     Boolean   @default(false)
  isDraft         Boolean   @default(true)
  isPublished     Boolean   @default(false)
  status          Boolean   @default(true)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation("UserBlogs", fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[] @relation(name: "BlogComments")
  notifications Notification[] @relation(name: "BlogNotifications")
}

model Keystore {
  id           String   @id @default(cuid())
  clientId     String
  primaryKey   String
  secondaryKey String
  status       Boolean  @default(true)
  createdAt    DateTime
  updatedAt    DateTime
  client       User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Role {
  id        String   @id @default(cuid())
  code      String   @unique
  status    Boolean  @default(true)
  createdAt DateTime
  updatedAt DateTime
  users     User[]   @relation("RoleToUser")
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  version     Int
  permissions String[]
  comments    String[]
  status      Boolean  @default(true)
  createdAt   DateTime
  updatedAt   DateTime
}

model Allocation {
  id        String   @id @default(cuid())
  studentId String   @unique
  tutorId   String?
  status    Boolean  @default(true)
  startAt   DateTime
  student   User     @relation(name: "StudentAllocations", fields: [studentId], references: [id], onDelete: Cascade)
  tutor     User?    @relation(name: "TutorAllocations", fields: [tutorId], references: [id], onDelete: Cascade)
}

model AllocationHistory {
  id        String   @id @default(cuid())
  tutorId   String
  allocatorId String
  allocator User     @relation(name: "Allocators", fields: [allocatorId], references: [id], onDelete: Cascade)
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation(name: "Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation(name: "Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  isRead     Boolean @default(false)
}

model Document {
  id            String         @id @default(cuid())
  studentId     String
  student       User           @relation(name: "Documents", fields: [studentId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fileName      String
  fileUrl       String // Cloudinary URL
  fileType      String // MIME type
  fileSize      Int // in bytes
  thumbnailUrl  String? // Cloudinary URL
  status        Boolean        @default(true)
  comments      Comment[]      @relation(name: "DocumentComments")
  notifications Notification[] @relation("DocumentNotifications")
}

model Comment {
  id         String    @id @default(cuid())
  message    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(name: "UserComments", fields: [userId], references: [id], onDelete: Cascade)
  documentId String?
  document   Document? @relation(name: "DocumentComments", fields: [documentId], references: [id], onDelete: Cascade)
  blogId     String?
  blog       Blog?     @relation(name: "BlogComments", fields: [blogId], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children   Comment[] @relation("ParentChild")
  parentId   String?
  likes      Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model Notification {
  id         String    @id @default(cuid())
  userId     String // Notification recipient (tutor)
  title      String
  message    String
  isRead     Boolean   @default(false)
  type       String?
  documentId String?
  document   Document? @relation(name: "DocumentNotifications", fields: [documentId], references: [id], onDelete: Cascade)
  blogId     String?
  blog       Blog?     @relation(name: "BlogNotifications", fields: [blogId], references: [id], onDelete: Cascade)
  meetingId  String?   
  meeting    Meeting?  @relation(name: "MeetingNotifications", fields: [meetingId], references: [id], onDelete: Cascade)
  user       User      @relation(name: "UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Meeting {
  id        String   @id @default(cuid())
  studentId String
  tutorId   String
  start   DateTime
  end     DateTime
  status    Boolean  @default(true)
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   User     @relation(name: "StudentMeetings", fields: [studentId], references: [id], onDelete: Cascade)
  tutor     User     @relation(name: "TutorMeetings", fields: [tutorId], references: [id], onDelete: Cascade)
  accepted  Boolean  @default(false)
  notifications Notification[] @relation("MeetingNotifications")
  records     Record[] @relation("MeetingRecords")
} 

model Record {
  id        String   @id @default(cuid())
  meetingId String
  meeting   Meeting  @relation(name: "MeetingRecords", fields: [meetingId], references: [id], onDelete: Cascade)
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityType String
  pageUrl      String?
  browser      String?
  timestamp    DateTime @default(now())
}