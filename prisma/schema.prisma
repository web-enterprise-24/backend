generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name                   String?
  profilePicUrl          String?
  email                  String     @unique
  password               String
  verified               Boolean    @default(false)
  status                 Boolean    @default(true)
  createdAt              DateTime
  updatedAt              DateTime
  id                     String     @id @default(cuid())
  address                String?
  city                   String?
  country                String?
  dateOfBirth            DateTime?
  gender                 String?
  requiredPasswordChange Boolean    @default(false)
  firstName              String?
  lastName               String?
  blogs                  Blog[]     @relation("UserBlogs")
  createdBlogs           Blog[]     @relation("CreatedBy")
  updatedBlogs           Blog[]     @relation("UpdatedBy")
  keystores              Keystore[]
  roles                  Role[]     @relation("RoleToUser")
  studentAllocations Allocation[] @relation(name: "StudentAllocations")
  tutorAllocations   Allocation[] @relation(name: "TutorAllocations")
  messages          Message[]    @relation(name: "Sender")
  receivedMessages  Message[]    @relation(name: "Receiver")
  documents         Document[]  @relation(name: "Documents")
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  description String
  text        String?
  draftText   String
  tags        String[]
  authorId    String
  imgUrl      String?
  blogUrl     String
  likes       Int?
  score       Float     @default(0.01)
  isSubmitted Boolean   @default(false)
  isDraft     Boolean   @default(true)
  isPublished Boolean   @default(false)
  status      Boolean   @default(true)
  publishedAt DateTime?
  createdById String
  updatedById String
  createdAt   DateTime
  updatedAt   DateTime
  author      User      @relation("UserBlogs", fields: [authorId], references: [id])
  createdBy   User      @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy   User      @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Keystore {
  id           String   @id @default(cuid())
  clientId     String
  primaryKey   String
  secondaryKey String
  status       Boolean  @default(true)
  createdAt    DateTime
  updatedAt    DateTime
  client       User     @relation(fields: [clientId], references: [id])
}

model Role {
  id        String   @id @default(cuid())
  code      String   @unique
  status    Boolean  @default(true)
  createdAt DateTime
  updatedAt DateTime
  users     User[]   @relation("RoleToUser")
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  version     Int
  permissions String[]
  comments    String[]
  status      Boolean  @default(true)
  createdAt   DateTime
  updatedAt   DateTime
}

model Allocation {
  id         String   @id @default(cuid())
  studentId  String   @unique
  tutorId    String?
  status     Boolean  @default(true)
  startAt    DateTime
  student User @relation(name: "StudentAllocations", fields: [studentId], references: [id])
  tutor   User? @relation(name: "TutorAllocations", fields: [tutorId], references: [id])
}

model AllocationHistory {
  id String @id @default(cuid())
  tutorId String
  startAt DateTime
  endAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())
  senderId String
  receiverId String
  content String
  createdAt DateTime
  updatedAt DateTime
  sender User @relation(name: "Sender", fields: [senderId], references: [id])
  receiver User @relation(name: "Receiver", fields: [receiverId], references: [id])
}

model Document {
  id String @id @default(cuid())
  studentId String
  student User @relation(name: "Documents", fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileName    String
  fileUrl     String   // Cloudinary URL
  fileType    String   // MIME type
  fileSize    Int      // in bytes
  status      Boolean  @default(true)
}
